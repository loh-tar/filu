This file is part of Filu (C) 2007, 2010, 2011, 2012 loh.tar@googlemail.com


Priority
==========
H: high
M: medium
L: low

The priority of things todo are quite arbitrary chosen and may not guaranty
that things are done in this order not even that they ever be done.

You are kindly invited to take one of these points to start your contribution.
But you could of cause chose any other, not here listed, issue if you like.


Sundries
==========
H: finish cmake build system. I think there need some modifications in use of
   variables
H: Config key InstallPath in doc/systemwide-settings-file.conf must
   configured by cmake. Sadly I didn't like the idea to have a .in file.
L: Replace all text what the user could read with tr(...) so that localised
   versions are possible
L: Create and use fancy Icons at the user interfaces.


Filu/Database
===============
H: Change market table to have timezone column and lunch
H: Add a 'Settings' table to store several info like version, creation date,
   last 'full' run etc
H: Add version to the DB, and auto detect updates
H: Handle issue date and mariture date at select for eodbar update
H: gfi_xcurrency_eodbar, it seems I have it not finished.
H: Handle "quality" field in trigger and/or insert functions.
H: adjust the eodBar data on the fly from dividends
M: add NOTIFY/LISTEN support. db.driver()->subscribeToNotification()
   e.g. if table eodbar updated -> performerf "ah, reload chart"
   Note: Because of a Qt driver limitation is the 'payload' not supported.
         I suggest to use a (temporary?) 'message table' where notifycations
    are inserted and only to listen on that table. Earliest Qt5 could fix it.
M: Add a holyday table where special market closes are listed
M: Think about a table 'jobs' where is placed what is todo. These is like the
   job (QString)list generated by eg 'full' command.
   The advantage is:
    - We have a DB so why not use for such a long table?
    - The DB could by his own generate jobs by a trigger function, e.g. after
      FI insert: job 'need bars fiId'
   That would need a changed behaviour of the 'deamon' comand. Must not wait
   for jobs by stdin but for something other..hm..or poll if job table has jobs
   and terminate if not. Table looks like:
   job_id,
   recipient/owner/principal, -- Who has to do this job special user only or any(root)
   frequency, -- Once, EveryMinutes, Dayly, Weekly, Quarterly
   status, -- Waiting, Running, Trouble
   next_run,
   depends, -- DateOnly, MarketClose, MarketClose+30min, NewQuotes('full' run)
   market, -- For which market is the job, 'NoMarket', 'Xetra' ...
   job -- 'full', 'this <fi>', 'script <provider> <name>'(e.g. to fetch an import file with various quotes)

M: Think about a function lovelysymbol to replace the view. The function can
   take a prefered symbol type to return. When not found returns as usual the
   symbol with the lowest seq(uence).
M: Add a diary where you can record your thoughts and feelings. These entrys
   should then be viewable in the chart like chartobjects.
L: Make wiki a provider?
   see http://en.wikipedia.org/wiki/List_of_market_opening_times
       http://en.wikipedia.org/wiki/List_of_stock_exchanges
L: Think about a table 'semantic' with links/absolute-identifiers for everything.
   Could be: 'symantic_id', 'semantic', 'used'. Where 'used' is a counter, incrementet
   by each inserted/reference use and decrement by remove of reference. When 0 can it
   deleted.
L: Oops, the Password setting take no effekt. I guess it is the consequence of
   the "trust" setting in /etc/postgresql/.../pg_hba.conf
L: figure out optimum postgres parameters.
L: list all markets a specific provider provides (?)
L: Change Filu/U to to FiluCore and FiluUser and add a new class Filu as part of FClass
   instead of FiluU
L: Add (a) header file(s) with useful typedefs like 'QHash<QString, QString> HashStrStr'


AgentF
========
M: Rethink 'filu' --foo
L: print more precise info when something goes wrong.
L: Add a progressbar like Im/Exporter at 'full'


InspectorF
============
Needs a review/rethink.
- Build the hash only out of realy important parts. Remove things like
  used group. Is it possible to replace variable names with normalized names?
- StrategyEditor.cpp looks poor. Rename to something else and use the name for
  a true editor with load/save, maybe at ManagerF. Reformat the rule file nicely
  when loaded
- Rethink the rule format. I guess it would be nicer split a rule over several
  lines, but thats a Trader issue
- Merge 'Last Results', 'Best Foo' tabs into the 'Detail' tab so that detail is
  always visible and changes when one of the other one is clicked.


BackTester
============
M: Change the way how 'Serial Test' works. Now is one strategy build and then
   each FI tested. But fetching bars out of the DB is much more expensive than
   rebuid and/or recalculate an indicator. That should result in nice
   performance improvement when testing many combinations and/or FIs.
L: Use somehow 'Complex Test' from depots simtrade.


PerformerF
============
M: add an "about" button with copyright and other stuff
M: Think about an option to *not* save the desity to prevent that a prefered
   adjustet density is overwritten
L: Fix SearchFi widget to set cursor inside when aktivated.
   Hm, it seems that's an issue with the DockWidget, when shown got it not the
   focus.
L: Add spin boxes to set the to be loaded date range
L: Add to IndiWidetGroup context menu "load indicator". The indi picker is not
   ever the best solution

ManagerF
==========
AddFiPage
-----------
H: Add a 'Check' button where the result table is examinded which data are
   already known and which not. Indicate these by a small colored icon in the
   result list. (or do all this auto maticly without button)
H: Split to own files for PSMGrp, HitCountLabel and TWIB. Rethink if
   all are needed.
H: Make a own class for the symbol edit area so that it can easy
   dynamically add/remove symbol lines depending on how many symbols the result
   table got
M: Rename to 'AddToDbPage' and improve all so that can be any kind of
   data fetched by a script editet and added to the db
M: Save/Restore splitter

Sundries
----------
M: make data at FI page editable.
M: add a split browse table to FI page, editable of course.
M: add the possibility to edit jobs, see above
L: add left from the editor a IndicatorPicker and above of him a list of last
   saved files. Both tilled by a horizontal splitter.
L: Add a simple 'version control system' to the editor page. Means, copy each
   file into a special subfolder and append a timestamp suffix. Add a button
   to bring up a combobox (or use the existing) where you can scroll thru the
   history of the current loaded file and restore the file if desired.
   Calc a hash to detect doublicates of versions
L: add syntax highlightning to indicator editor
L: add picker menu for available functions/commands like for TA-LIB. This means
   PLOTFOO, SETFOO, CROSS etc. and, more important, also FiluPower-Indicators
   usable with CalcFilu. But that needs concept work...
L: add a help page to display all (or most) available docu, copyright and other
   stuff


Libf
======
L: Fill FooTuple with FooId and Quality. Well, tuples are not likely used except of
   bars. But I don't like to drop entierly the idea of a universal lib where such
   tuples may usefull, or not?
L: Rethink error handling if using of  try/catch not the better way
L: Rethink logging see http://unix.stackexchange.com/questions/11953/make-a-log-file
L: Think about security. Is it an improvement if config key 'SqlPath' (and maybe
   some other) is forced to read from global (QSettings::SystemScope) settings file?
   If so, add some '#ifdef DEBBUG' in the code and a 'QSet<QString> mSystemScope'
   variable to RcFile which holds keys they are must read from SystemScope.


CmdHelper
===========
M: Add some docu how to use the class and his functions. Probably very well by
   using http://www.naturaldocs.org or similar http://sourceforge.net/projects/robodoc/
   Of cause would it also great for the whole Filu
L: Add printTable() which use FTool::formatToTable()
L: Add hideCmds() to not print at default help, only help+
L: Add automatic doc generation
L: Add brief to parms
L: Add/change regCmds() to take 'foo[:n[:m]]' where n number of min parm count is
   and m number of optional parm groups, see command 'add fi' and his optional
   symbol list
L: Think about checks for known options and print error or warning
   if an unknown found


GroupNavi
===========
H: Add "OnTheFly" group(s).
/Auto Hold automatically selected FIs, not stored, no possibility to add some by
drag&drop. Each group below /Auto use a SQL AutoGroup_<name>.sql and
AutoGroupChild_<name>.sql. The former is used twice. First of cause is it the
content of the group, the FIs. But when you click into the group it is used as
child groups. But clicking into is only possible if there exist a SQL
AutoGroupChild_* which than can select the content (FIs) of the child group.

/Auto/Indexes
  Use AutoGroup_Indexes.sql, select all FIs where type=index.
/Auto/Indexes/<foo>
  Use AutoGroupChild_Indexes.sql, select content e.g when "DAX" is klicked.
/Auto/NewFIs
  Use AutoGroup_NewFIs.sql, select last 10 or 20 FIs order by FiId DESC.

M: redesign FiGroupWidget signals/slots. use QModelIndex for slots and
   QHash<QString, QString> for signals. (hmm...)
M: Review Drag&Drop. It's not possible to drag in from an other application, only
   from his own. After short googling I was pointed to
     http://doc.qt.digia.com/4.6/model-view-dnd.html#encoding-exported-data


LaunchPad
===========
L: add icons. Make icon/text optional showing.
L: add as option that buttons turns 90Â° when tool bar is placed left or right


PlotSheet/Painter
===================
M: rethink MyMouseEvent. Use QVariant or a union to be more flexible. Rename to
   MyEvent or MyMessage
L: logarithmic Y-Scaling


Script
========


Indicator
===========
M: change the parsing, split it just after the reading from file into parts
   with the algorithm used at function parsing. Include the original line number
   of the indicator file as first parameter given to CalcFoo to improve error
   messages.
M  change SETFOO as noted in indicator-file-format.txt
M: auto detect math expressions, that is no need to write every time "MUP"
M: change PLOT(CANDLE,FI()) to PLOT(CANDLE) (auto detect FI())
M: fix LOADFI(...)
L: REF(...) fix to the possibility with forecasts.


IndicatorPicker
=================
L: change from treeview to "something better"


Trader
========
M: Change QList<QStringList> mOrders to QList<QHash<QString, QString>> or create a
   special struct for one order
L: short selling.


Depots
========
M: Print nice summary report. After all checks are done, select from order table all
   orders newer than "today".
M: Print a progressbar while checking, force Trader to print nothing in that case.


Exporter
==========


Importer
==========
H: add [Include]
M: add [Skip], follow data will ignored until [UnSkip] or [Piks] ?
M: add [Ignore]foo=bar, will ignore all data where key 'foo' has value 'bar'
L: market_insert.sql expect Reuters as symbol (yes, but?)
