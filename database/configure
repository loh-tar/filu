#!/usr/bin/perl

#
#    This file is part of Filu.
#
#    Copyright (C) 2007, 2010  loh.tar@googlemail.com
#
#    Filu is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    Filu is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Filu. If not, see <http://www.gnu.org/licenses/>.
#

#
#    FiMi
#
#    Copyright (C) 2001-2006 Christian Kindler
#
#    This file is part of FiMi.
#
#    FiMi is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    Foobar is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Foobar; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

use Getopt::Std;

# define default parameters
  my $database     = "filu";
  my $schema       = "filu";
  my $user         = "filu";
  my $createuser   = '1';
  my $createdb     = '1';
  my $createschema = '1';
  my $createtables = '1';
  my $debugl       = '0';

# override from ARGV
  my %opts;
  getopts('d:s:u:y:DSUTg:', \%opts);

  if ( $opts{ U } eq 1 ) { $createuser = '0' };
  if ( $opts{ D } eq 1 ) { $createdb = '0' };
  if ( $opts{ S } eq 1 ) { $createschema = '0' };
  if ( $opts{ T } eq 1 ) { $createtables = '0' };
  if ( $opts{ d } ne ""  ) { $database = $opts{ d } };
  if ( $opts{ s } ne ""  ) { $schema = $opts{ s } };
  if ( $opts{ u } ne ""  ) { $user = $opts{ u } };
  if ( $opts{ g } ne ""  ) { $debugl = $opts{ g } };
#   if ( $opts{ y } ne ""  )
#   {
#       if ( $opts{ y } ne "0" )
#       {
#           @initSymbols  = split (/,/, $opts{ y } )
#       }
#       else
#       {
#           my @dummy;
#           @initSymbols  = @dummy;
#       }
#   };

# define constants
  # create user sed <createuser> with
  my $usersql = "su postgres -c\"psql -d template1 -c\\\"CREATE USER \$(user) WITH PASSWORD '\$(user)'; \\\"; echo done role\" ";

  # create database sed <createdb> with
  my $dbsql = "su postgres -c\"psql -d template1 -c\\\"CREATE DATABASE \$(db) WITH OWNER = \$(user) ENCODING = 'UTF8';\\\"; echo done database \" ";

# define needed files
  my @dbfiles;

# override stupid user switch settings, if any
  if($createdb eq '1' )
  {
    $createschema = '1';
    $createtables = '1';

    # we have to create languages
    push (@dbfiles, glob("misc/languages.sql"));
  }
  elsif($createschema eq '1' )
  {
    $createtables = '1';
  }

# print what will be done
  print "Use Settings: Database=$database, Schema=$schema, User=$user, DebugLevel=$debugl\n";
  print "Create (1=yes/0=no): Database=$createdb, Schema=$createschema, User=$createuser, Tables=$createtables\n";

# build list of sql files to be process
  if ( $createschema ne '0' )
  {
    push (@dbfiles, glob("misc/schemata.sql"));
  }

  if ( $createtables ne '0' )
  {
      push (@dbfiles, glob("tables/*.sql"));
  }
  else
  {
    $createschema = '0';
  }

  push (@dbfiles, glob("misc/data_types.sql"));
  push (@dbfiles, glob("functions/*.sql"));
  push (@dbfiles, glob("views/*.sql"));
  push (@dbfiles, glob("indicators/*.sql"));

  if ( $createtables ne '0' )
  {
      push (@dbfiles, glob("defaults/*.sql"));
  }

# define tags to be replace
  if ( $createuser eq '0')   { $usersql = "# user exist, command removed" };
  if ( $createdb  eq '0')    { $dbsql = "# database exist, command removed" } ;

  my %tags;
     $tags{ "<database>" }     = $database;
     $tags{ "<user>" }         = $user;
     $tags{ "<schema>" }       = $schema;
     $tags{ "<createuser>" }   = $usersql;
     $tags{ "<createdb>" }     = $dbsql;
     $tags{ "<createschema>" } = $schemasql;

  if ( $debugl ge "1" )
  {
      $tags{ "--RAISE WARNING" } = "RAISE WARNING";
  }

  if ( $debugl ge "2" )
  {
      $tags{ "--RAISE NOTICE" }  = "RAISE NOTICE";
  }

  if ( $debugl ge "3" )
  {
      $tags{ "--RAISE INFO" }    = "RAISE INFO";
  }


# process each sql file
  my $sql = "";
  foreach $dbfile(@dbfiles)
  {
      print "Load $dbfile ...\n";
      $sql .= load($dbfile);
  }

  print "Parse Tags... ";
  $sql  = sed($sql, 1);
  print "done.\n";


# create sql file
  print "Writing SQL File... ";
  open(FILE, "> build_filu.sql");
  print FILE $sql;
  close(FILE);

  print "done.\n";


# create makefile
  my $makefile = load("Makefile.template");
     $makefile = sed($makefile);

  print "Writing Makefile... ";

  open(FILE, "> Makefile");
  print FILE $makefile;
  close(FILE);

  print "done.\n";


  print "\n\tRun 'sudo make install' to ";

  if($createdb eq '1')
  {
    print "create the database \'$database\'.\n";
  }
  elsif($createschema eq '1')
  {
    print "create the schema \'$schema\' inside of database \'$database\'.\n";
  }
  elsif($createtables eq '1')
  {
    print "replace the all tables and functions of schema \'$schema\' inside of database \'$database\'.\n";
  }
  else
  {
    print "replace only the functions of schema \'$schema\' inside of database \'$database\'.\n";
  }

  print "\n";

# exit clean
1;


#
# ---------------------------------------------------------
#

sub sed($:$)
{
    my $str = $_[0];
    my $status = $_[1];

    foreach $key( keys(%tags) )
    {
        my $old = "$key";
        my $new = $tags{ $key };

        while ( $str =~ s/$old/$new/)
        {
            if ($status == 1)
            {
                #print '.';
                $|++;
            }
        };
    }

    return $str;
}


sub load($)
{
    my $file = $_[0];

    open( MFILE, "< $file") || die( "Makefile.template not found!" );

        my @lines = <MFILE>;
        $content = join("", @lines);

    close(MFILE);

    return $content;
}
